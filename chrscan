#############################################
# Homozygosity Mapper Chrscan v1.0
# by Nikolaus Obholzer, 2012
# License: GPL
############################################# R --min-vsize=10M --max-vsize=8G --min-nsize=10M --max-nsize=8G
############################################# 
##########################################################################################################################################
##########################################################################################################################################
#
#
# Calculates hom vs het SNP densities from total SNPs with 4 columns for ALL SNPs on a select chromosome: "Chr","Pos","AlleleFreq", and "Coverage".
# The format of the input file is tab-delimited text as downloaded from Galaxy. Any column labels/ headers will be ignored.
#
#
##########################################################################################################################################
##########################################################################################################################################
# use for debugging
# args= c("/media/data/database/files/000/dataset_399.dat","/media/data/database/files/000/dataset_443.dat","/media/data/database/files/000/dataset_444.dat","A229-2","15")
options(bitmapType='cairo')
cat("MegaMapper initialized.\n")
##############################################
##############################################
# Define general variables
# SNP data file path 
args <- commandArgs(TRUE)
print(args)

megamapper_dir = "/export/local_tools/MegaMapper/"
Mname <- "YOUR_SAMPLE_NAME_HERE"
snpfilepath <- args[1]
Mname <- args[2] #"test" # name of mutant to be analyzed
chr <- as.numeric(args[3])
chr2 = args[3]
print(chr)
print(chr2)


# Read in SNPs from txt file	
snps0 <- read.table(file = snpfilepath, header = FALSE, comment.char ="#", sep="\t") # read in SNP file
counter = nrow(snps0) #determine number of entries(rows) in table
colnames(snps0) <- c("Chr","Pos","AlleleFreq","Coverage")	#annotate table
print(counter)

# set variables for mapping
#################################################################################################################
# Zv9.60 genome parameters: Chromosome lenghts
#
mutChrom <- c(1:25)	# prepare vector for comparing homozygosity between chromosomes
mutChrom2 <- c(1:25)	# prepare vector for comparing max hom/het ratio between chromosomes
chrLengths <- c(1:25)	# a bit tedious but Notepad otherwise creates linebreaks that cause errors in R when text is cut/pasted
chrLengths[1:10] = c(60348388,60300536,63268876,62094675,75682077,59938731,77276063,56184765,58232459,46591166)
chrLengths[11:20] = c(46661319,50697278,54093808,53733891,47442429,58780683,53984731,49877488,50254551,55952140)
chrLengths[21:25] = c(44544065,42261000,46386876,43947580,38499472) # chromosome 1-25 lengths of Zv9
#
##############################################################################################################
###############################################################################################################
################################################################################################################
#################################################################################################################
#2# Part2: plot a  descriptive plot detailing the ratio of actual SNP histograms and frequencies
############################################################################################
############################################################################################
# set boundaries
    snpF <- snps0[snps0$Chr == chr,]	# set chromosome to be analyzed
    print(nrow(snpF))

    snpHomo <- snpF[snpF$AlleleFreq > 0.9,] 	# filter for homozygous alleles
    snpHomo <- snpHomo[snpHomo$Coverage > 3,]	# set lower boundary for homozygous SNP coverage 
    snpHet <- snpF[snpF$AlleleFreq < 0.9,] 	# filter for heterozygous alleles 
    snpHet <- snpHet[snpHet$Coverage > 3,]	# set lower boundary for heterozygous SNP coverage 
    snpHomo_ct = (nrow(snpHomo)+nrow(snpHet))/50
    hom_ylim = c(0,snpHomo_ct + 1000)
    print(hom_ylim)

# plot
    Nbreaks <- 100 # number of bins for all following histograms
    p0 <- hist (snpHet$Pos, breaks = Nbreaks, plot = FALSE)  	# prepare sequence of bins for current chromosome
    bins = p0$breaks						# prepare sequence of bins by rounded chromosome length for current chromosome

#    pdf(args[5])
    png(args[5], width = 600, height = 800, bg = "white", pointsize = 12) # prepare output file
    par(oma=c(2,2,2,2), mar=c(3,4,2,1), mfrow=c(4,1))				#prepare plot arrangement
    homo <- hist(snpHomo[,2],breaks=bins, main="", ylab="Freq. hom", xlab="", ylim= hom_ylim)	#plot homozygous SNPs
    homo$counts[homo$counts==0] <- 1# 0.01	#filter out any nonsensical values(0), which may appear in SNP deserts
    homo2 = cbind(p0$mids,homo$counts)
    homo2 = homo2[homo2[,2] > 10, ] 

# fit a smoothing line to the histogram and plot it
    hlo <- loess(homo2[,2] ~ homo2[,1], span = 0.4)	
    hFit <- fitted(hlo)
    for (h in 1:length(hFit)) # beautify plot
    {
    if (hFit[h] < 0) {hFit[h] = 0} 
    }
    lines(homo2[,1],hFit, col='red', lwd=2)

    het <- hist(snpHet[,2],breaks=bins, main="", ylab="Freq. het", xlab="", ylim=hom_ylim)	#plot heterozygous SNPs
    het$counts[het$counts==0] <- 1 #0.1# 0.001	#filter out any nonsensical values(0), which may appear in SNP deserts
################################ discarding last value due to error-proneness of bin
    het2 = cbind(p0$mids,het$counts)
#    het2 = het2[1: (nrow(het2)-1), ]
    het2 = het2[het2[,1] %in% homo2[,1],]

# fit a smoothing line to the histogram and plot it
    helo <- loess(het2[,2] ~ het2[,1], span = 0.4)	
    heFit <- fitted(helo)
    lines(het2[,1],heFit, col='black', lwd=2)

#    text(p0$mids[heFit==min(heFit)],500,p0$mids[heFit==min(heFit)])# annotate plot with chr position of het min
    heFit2 = heFit + (max(heFit)/10)
    minint = het2[heFit2 < min(heFit2)*1.2, 1]
    lborder = min(minint)
    rborder = max(minint)
    hetvalley = mean(c(lborder,rborder))
    text(hetvalley,0,format(hetvalley, scientific=FALSE)) 

    combo = hFit-heFit
    for (nn in 1: length(combo))
    { if (combo[nn] <1) 
    { combo[nn] = 0 } }
#    combo = 200*hFit/heFit
    lines(homo2[,1],combo, col='lightblue', lwd=2)

#    lines(p0$mids,combo, col='lightblue', lwd=2)
    duh = het2[combo==max(combo),1]
    text(duh,max(combo),format(duh, scientific=FALSE))# annotate plot with chr position of fit differential peak

#plot square of homo-to-heterozygous ratio
#    plot(p0$mids, (homo$counts/het$counts)^2,t="l",col="red", ylab="(hom/het)^2 [AU]", yaxt='n', xlab="")	

# plot SNP ratios per recombination frequency (bin size in cM)

cMs_file = paste(megamapper_dir,"allchrweights2",sep="")
cMs <- read.table(file=cMs_file, header = FALSE)
#cMs <- read.table(file="~/galaxy-dist/tools/MegaMapper/allchrweights2", header = FALSE)

cMs = cMs[cMs$V2==chr,]
snpcm = cbind(cMs$V3,cMs$V4)
ii = nrow(snpcm)
homsnpcm = seq(1:ii)
for (i in 1 : ii)
{
homsnpcm[i] = nrow(snpHomo[snpHomo$Pos<=snpcm[i,2] & snpHomo$Pos>=snpcm[i-1,2],])
}

hetsnpcm = seq(1:ii)
for (i in 1 : ii)
{
hetsnpcm[i] = nrow(snpHet[snpHet$Pos<=snpcm[i,2] & snpHet$Pos>=snpcm[i-1,2],])
if (hetsnpcm[i] < 10) {hetsnpcm[i]=10} else {}
}

snpcm = cbind(snpcm,homsnpcm,hetsnpcm,(homsnpcm/hetsnpcm))
snpcm[is.na(snpcm[,5]),5] = 0.01
snpcm[nrow(snpcm)] = snpcm[nrow(snpcm)-5] 

plot(snpcm[,2], snpcm[,5],t="l",col="green", ylab="Map score [AU]", yaxt='n', xlab=paste("Chr",chr," position"))	
text(snpcm[,2][snpcm[,5]==max(snpcm[,5])],max(snpcm[,5])*0.75,snpcm[,2][snpcm[,5]==max(snpcm[,5])])# annotate plot with chr position of cM peak

cmfit1 <- loess((snpcm[,5]) ~ (snpcm[,2]), span = 0.4)	
cmfit2 <- fitted(cmfit1)
lines(snpcm[,2],cmfit2, col='darkgreen', lwd=2)
densfit_cm <- snpcm[cmfit2==max(cmfit2),2]
text(densfit_cm,(max(cmfit2)*0.75),densfit_cm)# annotate plot with chr position of fitted cM peak

# prepare table to read out plotting results
    tmp1 <- (homo$counts/het$counts)
    tmp2 <- cbind(p0$mids, tmp1)
    colnames(tmp2) <- c(paste("Chr",chr,"_Position",sep=""),"Homozygosity_Index")
    tmp2[is.na(tmp2[,2]),2] =0                   #filter out any nonsensical values
    tmp2[is.infinite(tmp2[,2]),2] =0             #filter out any nonsensical values
    tmp2[is.nan(tmp2[,2]),2] =0                  #filter out any nonsensical values

#plot homo-to-heterozygous ratio
    plot(p0$mids, (homo$counts/het$counts),t="l",col="blue", ylab="hom/het [AU]", yaxt='n', xlab="")

# fit smoothing lines to the histogram and plot it
    lo <- loess((homo$counts/het$counts) ~ p0$mids, span = 0.4)	
    Fit <- fitted(lo)

#    lines(p0$mids,Fit, col='lightblue', lwd=2)
    alt = p0$mids[Fit==max(Fit)]
#    text(alt,max(Fit)*1.1,paste("Alt.Pos.: ",alt))# annotate plot with chr position of alternate peak
#    result	# output mapping result text
    title(paste(Mname," Chr",chr," Mutation Mapping",sep=""), cex=4, outer = TRUE)

    sqr <- loess((homo$counts/het$counts) ~ p0$mids, span = 0.25)	
    sqrFit <- fitted(sqr)
    lines(p0$mids,sqrFit, col='darkred', lwd=2)
    dah = p0$mids[sqrFit==max(sqrFit)]
    text(dah,max(sqrFit),dah)# annotate plot with chr position of alternate peak

dev.off() # turn off graphics engine, save plot file to disk
print ("Chromosome scan complete.")
##############################################
#############################################
#output critical interval and save as tab-delimited text file

density_ratio <- c("Heterozygosity Valley",chr,(hetvalley-6*p0$breaks[2]),(hetvalley+6*p0$breaks[2]))
densratio_fit <- c("SNP Density Ratio Fit",chr,(densfit_cm-(6*p0$breaks[2])),(densfit_cm+(6*p0$breaks[2])))
compromise <- c("Compromise Fit      ",chr, format((hetvalley+densfit_cm)/2-(6*p0$breaks[2]), scientific = F), format((hetvalley+densfit_cm)/2+(6*p0$breaks[2]), scientific = F))

# type	chr	low	high
# SNP density ratio fit	13	24250000	28250000

write.table(strsplit(density_ratio, "\t"), file = args[4], append = FALSE, quote = FALSE, sep = "\t", col.names = FALSE, row.names = FALSE)
write.table(strsplit(densratio_fit, "\t"), file = args[4], append = T, quote = FALSE, sep = "\t", col.names = FALSE, row.names = FALSE)
write.table(strsplit(compromise, "\t"), file = args[4], append = T, quote = FALSE, sep = "\t", col.names = FALSE, row.names = FALSE)
print ("Chromosome scan complete.")

##############################################
#############################################
quit(save = "no")


