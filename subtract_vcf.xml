<tool id="custom_subtract_vcf" name="SNP Intersector/ Subtractor" version="1.0.0">
  <description>Intersect or subtract two VCF tables</description>
  <requirements>
     <requirement type="package">bx-python</requirement>
     <requirement type="package">bedtools</requirement>
  </requirements>
  <command interpreter="python">
    subtract_vcf.py
      --input1=$input1
      --input2=$input2
      --priority=$priority_file
      <!--dbkey=${input1.metadata.dbkey} -->
      --intersect=$intersect 
      --output1=$output1
      --output2=$output2
  </command>

  <inputs>
    <param name="input1" label="First VCF file" type="data" format="vcf,tabular" />
    <param name="input2" label="Second VCF file" type="data" format="vcf,tabular" help="Note that all BEDTools load the B file into memory and process the A file one-by-one against the features in B. Therefore when possible, one should make set the smaller of the two files to be the B file. For example, you'll discover that finding overlaps between a list of 30,000 SNPs and 100 million SNPs will work much more efficiently with the genes file set as VCF file B. If you want to subtract a large B from a small A, simply set the *Priority file* parameter below to *Second file*."/>

    <param name="priority_file" type="select" label="Priority file" help="The record written to the 'intersect' output will come from this file ('unique' records, when selected below, are always from file A).">
      <option value="first_file">First file</option>
      <option value="second_file">Second file</option>
    </param>

    <param name="intersect" type="select" label="Intersect or complement" help="Keep records that appear in both files (intersect) or keep only unique records of A (complement)?">
      <option value="keep_intersect">Keep intersect (A in B)</option>
      <option value="keep_unique">Keep unique (A - B)</option>
      <option value="keep_allele">Keep unique allele (A - B)</option>
    </param>
  </inputs>

  <outputs>
    <data format="vcf" name="output1" label="${tool.name} on ${on_string}" />
    <data format="tabular" name="output2" label="${tool.name} on ${on_string} (statistics)" />
  </outputs>
 
  <tests>
    <test>
      <param name="input1" value="1.vcf" ftype="vcf" />
      <param name="input2" value="2.vcf" ftype="vcf" />
      <param name="priority_file" value="first_file" />
      <param name="intersect" value="keep_intersect" />
      <output name="output1" file="1_2_intersect_priority_1.vcf" lines_diff="2" ftype="vcf" />
    </test>
  </tests>

  <help>
**What it does**

This tool uses `Bedtools`_ intersectBed command to generate the intersection of two VCF files and keep the unique records of file 1.

References:
Quinlan AR and Hall IM, 2010. BEDTools: a flexible suite of utilities for comparing genomic features. Bioinformatics. 26, 6, pp. 841â€“842.
Dale RK, Pedersen BS, and Quinlan AR. Pybedtools: a flexible Python library for manipulating genomic datasets and annotations. Bioinformatics (2011). doi:10.1093/bioinformatics/btr539 


Two input VCF files are required as input and the intersection of these two files is generated and sent to the output.  These files must be sorted by genomic coordinate to function correctly, although the reference sequence order is not important.

The record written to the output will come from the file specified in the "Priority File" argument. By default, the output comes from the first file (A).

.. _Bedtools: http://code.google.com/p/bedtools/
  </help>
</tool>
